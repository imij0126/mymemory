DELETE FROM EMPLOYEE 
WHERE USERS_ID = 'imij0126';

SELECT * FROM EMPLOYEE WHERE USERS_ID = 'imij0126';

commit;
ROLLBACK;

drop table JOB_CODE;
DROP TABLE DEPT;
DROP TABLE EMPLOYEE;

UPDATE USERS
   SET USERS_PASSWORD = 'never0703'
 WHERE USERS_ID = 'imij0126';
 
 CREATE TABLE JOB_CODE (
    JOB_CODE VARCHAR2(3) PRIMARY KEY, -- 직책 코드
    JOB_NAME VARCHAR2(15) NOT NULL -- 직책 이름
);
INSERT INTO JOB_CODE (JOB_CODE, JOB_NAME)VALUES(
'J01', '사장'
);

INSERT INTO JOB_CODE (JOB_CODE, JOB_NAME)VALUES(
'J02', '부장'
);
-- 부서 테이블
CREATE TABLE DEPT (
    DEPT_CODE VARCHAR2(3) PRIMARY KEY, -- 부서 코드
    DEPT_NAME VARCHAR2(15) NOT NULL -- 부서 이름
);

INSERT INTO DEPT (DEPT_CODE, DEPT_NAME)VALUES(
'D01', '경영'
);

INSERT INTO JOB_CODE (JOB_CODE, JOB_NAME)VALUES(
'D02', '관리'
);
DROP TABLE EMPLOYEE;

CREATE TABLE EMPLOYEE (
    USERS_ID VARCHAR2(20) PRIMARY KEY, -- 직원 ID
    EMPLOYEE_NAME VARCHAR2(30),
    PHONE VARCHAR2(13), 
    ADDRESS VARCHAR2(150),
    DEPT_CODE VARCHAR2(3), -- 부서 코드
    JOB_CODE VARCHAR2(3), -- 직책 코드
    SALARY NUMBER,
    EMPLOYEE_TYPE VARCHAR2(9) CHECK(EMPLOYEE_TYPE IN('관리자','직원')),
    FOREIGN KEY (DEPT_CODE) REFERENCES DEPT(DEPT_CODE),
    FOREIGN KEY (JOB_CODE) REFERENCES JOB_CODE(JOB_CODE)
);

DELETE FROM USERS WHERE USERS_ID = 'kimchangsik123';

COMMIT;

INSERT INTO EMPLOYEE (
    USERS_ID, 
    EMPLOYEE_NAME, 
    PHONE, 
    ADDRESS, 
    DEPT_CODE, 
    JOB_CODE, 
    SALARY,
    EMPLOYEE_TYPE
) VALUES (
    'kimchangsik123',               
    '김창식',             
    '010-2725-0780',       
    '고백시 행복동', 
    'D01',                 
    'J01',    
     1000,
    '관리자'                 
);
INSERT INTO EMPLOYEE (
    USERS_ID, 
    EMPLOYEE_NAME, 
    PHONE, 
    ADDRESS, 
    DEPT_CODE, 
    JOB_CODE, 
    SALARY,
    EMPLOYEE_TYPE
) VALUES (
    'potato12345',               
    '양민욱',             
    '010-2725-0780',       
    '경기도 광주시 초월읍', 
    'D01',                 
    'J02',
    1000000,
    '직원'                 
);
drop table users;
delete from EMPLOYEE where employee.users_id = 'kimchangsik123';
COMMIT;

CREATE TABLE RESERVATION (
    RESERVATION_NO NUMBER PRIMARY KEY, -- 예약 번호
    USERS_ID VARCHAR2(20) NOT NULL, -- 사용자 ID
    RESERVATION_DATE DATE DEFAULT SYSDATE NOT NULL, -- 예약 날짜
    RESERVATION_STATUS VARCHAR2(1) CHECK (RESERVATION_STATUS IN ('y', 'n')) NOT NULL, -- 예약 상태
    FOREIGN KEY (USERS_ID) REFERENCES USERS(USERS_ID)
);

-- 주문 내역 테이블
CREATE TABLE ORDER_HISTORY (
    ORDER_NO NUMBER PRIMARY KEY, -- 주문 번호
    RESERVATION_NO NUMBER NOT NULL, -- 예약 번호
    ORDER_DATE DATE DEFAULT SYSDATE NOT NULL, -- 주문 날짜
    FOREIGN KEY (RESERVATION_NO) REFERENCES RESERVATION(RESERVATION_NO)
);

-- 주문 세부 내역 테이블
CREATE TABLE ORDER_DETAILS (
    ORDER_NO NUMBER, -- 주문 번호
    MENU_NO NUMBER, -- 메뉴 번호
    FOREIGN KEY (ORDER_NO) REFERENCES ORDER_HISTORY(ORDER_NO),
    FOREIGN KEY (MENU_NO) REFERENCES MENU(MENU_NO)
);

-- 테이블 예약 정보 테이블
CREATE TABLE TABLE_RESERVATION (
    RESERVATION_NO NUMBER PRIMARY KEY, -- 예약 번호
    TABLE_NO VARCHAR2(5) NOT NULL, -- 테이블 번호
    FOREIGN KEY (RESERVATION_NO) REFERENCES RESERVATION(RESERVATION_NO)
);

CREATE TABLE LUNCHBOX_RESERVATION (
    RESERVATION_NO NUMBER PRIMARY KEY, -- 예약 ID
    USERS_ID VARCHAR2(20), -- 사용자 ID
    RESERVATION_DATE DATE, -- 예약 날짜
    LUNCHBOX_DETAILS VARCHAR2(5) CHECK(LUNCHBOX_DETAILS IN('3첩', '5첩', '7첩')), -- 도시락 세부 정보
    FOREIGN KEY (RESERVATION_NO) REFERENCES RESERVATION(RESERVATION_NO)
);

-- 결제 정보 테이블
CREATE TABLE PAYMENT (
    PAYMENT_ID NUMBER PRIMARY KEY, -- 결제 ID
    ORDER_NO NUMBER, -- 주문 번호
    AMOUNT NUMBER(10, 2), -- 결제 금액
    PAYMENT_DATE DATE, -- 결제 날짜
    PAYMENT_METHOD VARCHAR2(20), -- 결제 방법
    FOREIGN KEY (ORDER_NO) REFERENCES ORDER_HISTORY(ORDER_NO)
);

-- 게시물 테이블
CREATE TABLE POST (
    POST_NO NUMBER PRIMARY KEY, -- 게시물 번호
    POST_COUNT NUMBER NOT NULL, -- 조회수
    TITLE VARCHAR2(300) NOT NULL, -- 제목
    CONTENT VARCHAR2(600) NOT NULL, -- 내용
    CREATION_DATE DATE NOT NULL, -- 생성 날짜
    MODIFICATION_DATE DATE, -- 수정 날짜
    DELETE_STATE VARCHAR2(1) CHECK (DELETE_STATE IN ('y', 'n')) NOT NULL, -- 삭제 상태
    USERS_ID VARCHAR2(20) NOT NULL, -- 사용자 ID
    CATEGORY_CODE NUMBER, -- 카테고리 코드
    FOREIGN KEY (USERS_ID) REFERENCES USERS(USERS_ID)
);

INSERT INTO POST (POST_NO, POST_COUNT, TITLE, CONTENT, CREATION_DATE, MODIFICATION_DATE, DELETE_STATE, USERS_ID, CATEGORY_CODE)
VALUES (4, 100, '집갈래', '수고링~', SYSDATE, SYSDATE, 'n', 'whdrns456', 1);

INSERT INTO POST (POST_NO, POST_COUNT, TITLE, CONTENT, CREATION_DATE, MODIFICATION_DATE, DELETE_STATE, USERS_ID, CATEGORY_CODE)
VALUES (5, 100, '월급 올려주세요', '올려줘올려줘올려줘올려줘올려줘올려줘올려줘', SYSDATE, SYSDATE, 'n', 'whdrns456', 1);

INSERT INTO POST (POST_NO, POST_COUNT, TITLE, CONTENT, CREATION_DATE, MODIFICATION_DATE, DELETE_STATE, USERS_ID, CATEGORY_CODE)
VALUES (2, 50 , '월급좀 올려주세요', '올려줘올려줘올려줘올려줘올려줘올려줘올려줘', SYSDATE, SYSDATE, 'n', 'whdrns456', 1);

INSERT INTO POST (POST_NO, POST_COUNT, TITLE, CONTENT, CREATION_DATE, MODIFICATION_DATE, DELETE_STATE, USERS_ID, CATEGORY_CODE)
VALUES (3, 60 , '재료좀 사주세요', '사달라고사달라고사달라고사달라고사달라고', SYSDATE, SYSDATE, 'n', 'whdrns456', 1);

commit;

-- 제안 응답 테이블
CREATE TABLE SUGGESTION_RESPONSE (
    RESPONSE_ID NUMBER PRIMARY KEY, -- 응답 ID
    POST_NO NUMBER, -- 게시물 번호
    RESPONSE_CONTENT CLOB, -- 응답 내용
    RESPONSE_DATE DATE, -- 응답 날짜
    FOREIGN KEY (POST_NO) REFERENCES POST(POST_NO)
);

CREATE TABLE TABLE_RESERVATION (
    RESERVATION_NO NUMBER PRIMARY KEY, -- 예약 번호
    TABLE_NO VARCHAR2(5) NOT NULL, -- 테이블 번호
    FOREIGN KEY (RESERVATION_NO) REFERENCES RESERVATION(RESERVATION_NO)
);

INSERT INTO TABLE_RESERVATION (RESERVATION_NO,TABLE_NO)
VALUES (1, 'F1');

CREATE TABLE LUNCHBOX_RESERVATION (
    RESERVATION_NO NUMBER PRIMARY KEY, -- 예약 ID
    USERS_ID VARCHAR2(20), -- 사용자 ID
    RESERVATION_DATE DATE, -- 예약 날짜
    LUNCHBOX_DETAILS VARCHAR2(5) CHECK(LUNCHBOX_DETAILS IN('3첩', '5첩', '7첩')), -- 도시락 세부 정보
    FOREIGN KEY (RESERVATION_NO) REFERENCES RESERVATION(RESERVATION_NO)
);

CREATE TABLE RESERVATION (
    RESERVATION_NO NUMBER PRIMARY KEY, -- 예약 번호
    USERS_ID VARCHAR2(20) NOT NULL, -- 사용자 ID
    RESERVATION_DATE DATE DEFAULT SYSDATE NOT NULL, -- 예약 날짜
    RESERVATION_STATUS VARCHAR2(1) CHECK (RESERVATION_STATUS IN ('y', 'n')) NOT NULL, -- 예약 상태
    FOREIGN KEY (USERS_ID) REFERENCES USERS(USERS_ID)
);